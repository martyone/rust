From 0e65448e2827f31fdc3f69a7d9a37b8a2076340a Mon Sep 17 00:00:00 2001
From: bjorn3 <bjorn3@users.noreply.github.com>
Date: Sat, 7 Nov 2020 12:28:31 +0100
Subject: [PATCH 06/10] Avoid constructing an anyhow::Error when not necessary

anyhow::Error always captures a backtrace when created, which is expensive
---
 src/cargo/core/compiler/job_queue.rs | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/src/tools/cargo/src/cargo/core/compiler/job_queue.rs b/src/tools/cargo/src/cargo/core/compiler/job_queue.rs
index 2f2e89372..b5c544619 100644
--- a/src/tools/cargo/src/cargo/core/compiler/job_queue.rs
+++ b/src/tools/cargo/src/cargo/core/compiler/job_queue.rs
@@ -53,7 +53,6 @@ use std::cell::Cell;
 use std::collections::{BTreeMap, HashMap, HashSet};
 use std::io;
 use std::marker;
-use std::mem;
 use std::sync::Arc;
 use std::time::Duration;
 
@@ -807,9 +806,10 @@ impl<'a, 'cfg> DrainState<'a, 'cfg> {
             let mut sender = FinishOnDrop {
                 messages: &messages,
                 id,
-                result: Err(format_err!("worker panicked")),
+                ok: false,
             };
-            sender.result = job.run(&state);
+            let result = job.run(&state);
+            sender.ok = true;
 
             // If the `rmeta_required` wasn't consumed but it was set
             // previously, then we either have:
@@ -823,10 +823,12 @@ impl<'a, 'cfg> DrainState<'a, 'cfg> {
             // we'll just naturally abort the compilation operation but for 1
             // we need to make sure that the metadata is flagged as produced so
             // send a synthetic message here.
-            if state.rmeta_required.get() && sender.result.is_ok() {
+            if state.rmeta_required.get() && result.is_ok() {
                 messages.push(Message::Finish(id, Artifact::Metadata, Ok(())));
             }
 
+            messages.push(Message::Finish(id, Artifact::All, result));
+
             // Use a helper struct with a `Drop` implementation to guarantee
             // that a `Finish` message is sent even if our job panics. We
             // shouldn't panic unless there's a bug in Cargo, so we just need
@@ -834,14 +836,18 @@ impl<'a, 'cfg> DrainState<'a, 'cfg> {
             struct FinishOnDrop<'a> {
                 messages: &'a Queue<Message>,
                 id: JobId,
-                result: CargoResult<()>,
+                ok: bool,
             }
 
             impl Drop for FinishOnDrop<'_> {
                 fn drop(&mut self) {
-                    let msg = mem::replace(&mut self.result, Ok(()));
-                    self.messages
-                        .push(Message::Finish(self.id, Artifact::All, msg));
+                    if !self.ok {
+                        self.messages.push(Message::Finish(
+                            self.id,
+                            Artifact::All,
+                            Err(format_err!("worker panicked")),
+                        ));
+                    }
                 }
             }
         };
-- 
2.29.2

